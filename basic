https://www.howtogeek.com/177213/linux-isnt-just-linux-8-pieces-of-software-that-make-up-linux-systems/

https://www.udemy.com/course/advanced-linux-administration/

https://www.tecmint.com/create-new-service-units-in-systemd/

Bootloader
The Linux Kernel
Daemons
The Shell

===============

hardlink and softlink:-

https://www.geeksforgeeks.org/difference-between-hard-link-and-soft-link/

Access Control Lists(ACL) in Linux
https://www.geeksforgeeks.org/access-control-listsacl-linux/#:~:text=What%20is%20ACL%20%3F,group%20to%20any%20disc%20resource.

0: stdin
1: stdout
2: stderr

ls > capture.txt (stdout)

To explicitly redirect  stdout, use this redirection instruction:
To explicitly redirect  stderr, use this redirection instruction:

Redirecting stdout and stderr to the Same File

./error.sh 2> capture.txt
./error.sh > capture.txt 2>&1

cat > ravi.txt

cut
awk
grep and egrep
sort
uniq
wc

useradd –g superheros –s /bin/bash –c “user description” –m –d /home/spiderman spiderman


/etc/passwd
/etc/shadow
/etc/group

https://askubuntu.com/questions/445361/what-is-difference-between-etc-shadow-and-etc-passwd

su has only one purpose: to start a shell running as the given user (root by default).

sudo is a highly configurable program that lets you run any command as any user,
with the configuration allowing the local administrator to place limits on what commands you can run using sudo, 
as well as which commands require your password.


CTRL-u   - erase everything you've typed on the command line
CTRL-c   - stop/kill a command
CTRL-z   - suspend a command
CTRL-d   - exit from an interactive program (signals end of data).

 setuid, setgid and stick bit
 rsync 
 Linux chronyd (New Version of NTP)

Linux Sendmail

Installation and Configuration of Network File System (NFS)
https://web.mit.edu/rhel-doc/5/RHEL-5-manual/Deployment_Guide-en-US/ch-nfs.html
https://dev.to/prajwalmithun/setup-nfs-server-client-in-linux-and-unix-27id

Linux Samba Installation and Configuration





Runlevel: 

Determines the state of a system and controls how one
can login, what services and scripts should run when a 
system starts.  

Defaults runlevels vary from distro to distro, as do the
default settings in each run level.

Below are the run levels for Redhat/CentOS 6.

Note: Redhat/CentOS 7 uses Targets.


Runlevel are defined from 0 – 6: 

- Runlevel 0 – Shut down the system 
(do not make it default)

- Runlevel 1 – single mode

- Runlevel 2 – multiuser mode without networking
(no NFS support)

- Runlevel 3 – multiuser without "X" (command line)
(Most commonly used - recommended for servers)

- Runlevel 4- Not used

- Runlevel 5 – X11 (GUI)
(Good for end-user systems, NOT recommended for Servers)


- Runlevel 6 – Reboots the system
Do not set inittab value to runlevel6.



Other Distros: 

Debian and Ubuntu also has 7 runlevels. 0, 1 and 6 are 
the same as Redhat. 
Runlevels 2 throuh five are identical but can be 
configured in whatever way you desire.
Default is run level 2 but it is configured as a full
multi-user mode with graphics (X windows).



- View current runlevel: 

# runlevel

- To change current runlevel
# init runlevel  (init 6 will reboot)

- To change default run level: 
Modify /etc/inittab file and change default level. 


=========================

Targets:

Systemd has replaced sysVinit as the default service 
manager in RHEL 7. Some of the sysVinit commands have
been symlinked to their RHEL 7 counterparts, however 
this will eventually be deprecated in favor of the 
standard systemd commands in the future.

Systemd uses Targets instead of the runlevels.


- Each Runlevel Target file is a symbolic link to the
system-start Target equivalents. For example:

# cd /usr/lib/systemd/system
# ls -l runlevel*




Comapring runlevel with Target: 

Runlevel 0 – shut down the system
Runlevel 1 – single mode
Runlevel 2 – multiuser mode without networking
Runlevel 3 – multiuser with text login screen
Runlevel 4- customized runlevel (not in use)
Runlevel 5 – runlevel 3 with graphical login
Runlevel 6 – Reboots the system


Targets: 

0- runlevel 0.target, poweroff.target 
System halt/shutdown

1- runlevel1.target, rescue.target
Single-user mode (rescue mode)

2- runlevel2.target
User-defined/Site-specific runlevels. By default, 
identical to 3.

3- runlevel3.target, multi-user.target
Multi-user, non-graphical mode, command line

4-  runlevel4.target
User-defined/Site-specific runlevels. By default, 
identical to 3.

5- runlevel5.target, graphical.target
Multi-user, graphical mode

6- runlevel6.target, reboot.target
Reboot


- emergency- emergency.target
Emergency mode. Root fs is mounted read only, no other
fs are mounted and no networking either.



- Managing Targets



Viewing and setting Default boot Target:

- To check current default boot target
# systemctl get-default

multi-user.target


- To change default boot target:
# systemctl set-default multi-user.target

-----

Switching into specific targets: 

- Switch to graphical target (Legacy runlevel 5)
# systemctl isolate graphical.target

- Switch to multi-user Target (Legacy runlevel 3)
# systemctl isolate multi-user.target

- Shutdown system to halt state:
# systemctl halt

- Shutdown and power off
# systemctl poweroff

- Reboot
# systemctl reboot

- To switch to Legacy runlevel 3 Target:
# systemctl isolate runlevel3.target

=============================

cronjob

=============================

Both UEFI and BIOS are low-level software that starts when you boot your PC before booting your operating system, 
but UEFI is a more modern solution, supporting larger hard drives, faster boot times, more security features, and—conveniently—graphics and mouse cursors.

The BIOS goes through a POST, or Power-On Self Test, before booting your operating system. It checks to ensure your hardware configuration is valid and working properly.
If something is wrong, you’ll see an error message or hear a cryptic series of beep codes. 
You’ll have to look up what different sequences of beeps mean in the computer’s manual.

===

When your computer boots—and after the POST finishes—the BIOS looks for a Master Boot Record, or MBR,
stored on the boot device and uses it to launch the bootloader.

When your computer boots—and after the POST finishes—the BIOS looks for a Master Boot Record, 
or MBR, stored on the boot device and uses it to launch the bootloader.

====

wild cards
==========

ls -l o??d 
If we want to list all files that begin with O, end with d and have two characters in between, we can use the following syntax:

=
ls -l o*d
To list all files that begin with O and end with d, no matter the number of character in between, we can use the following syntax

=
To list all files that begin with O and end with d and have a or c in between, we need to use the following syntax:ls -l a[ac]d

=====================================================================

https://www.pluralsight.com/blog/it-ops/linux-file-permissions


=====================================

pluralsight ALL=(ALL) ALL

Let's explain the syntax of this line:

    First off, we indicate which user this rule refers to (pluralsight).

    The first ALL means the rule applies to all hosts using the same /etc/sudoers file. Nowadays, this means the current host since the same file is not shared across other machines.
    Next, (ALL) ALL tells us that pluralsight will be allowed to run all commands as any user. Functionally speaking, this is equivalent to (root) ALL.
    
    =================================================
    
    df -h | grep -v tmpfs
    /etc/fstab fileds
    
    troubleshoot
    
   receue mode
   /mnt/sysimage/
   and change the file that contains miss spleels for drive
   
   =================
   
   umount the drive
   fsck /dev/sda1
   fsck.xfs /dev/sda1 for consistency check
   xfs_repair /dev/sda1 for repairing the disk
    
    ==================================================
    
    find /path/to/files/ -type f -name '*.jpg' -mtime +30 -exec rm {} \;
    
    find /path/to/files/ -mtime +30  -exec ls -l {} \;
    find /path/to/files/ -mtime +30  -exec rm {} \;
        find /path/to/files/ -mtime +30  -exec mv {} {}.old  {} \;
        
        find / -name ravikiran
    ====================================================
   
    add disk and add more space
    ADD DISKS AND CREATE LVM PARTITIONS
    TAKE SNAPSHOTS OF LVM AND EXTENDED LVM
    recover LVM2 partition, PV, VG, LVM metdata in Linux
    
    ACL,symbolic links
    
    https://www.thegeekdiary.com/centos-rhel-7-how-to-change-runlevels-in-rhel7-with-systemd/
    
    ======================
    getfacl,setfacl


ipmitool.rb u012.ams1.turn.com chassis bootdev pxe

difference between RAID0,1,2,3

echo "- - -" >> /sys/class/scsi_host/host_$i/scan (SCAN A DEVICES WITH REBOOTING

find /path/to/files/ -mtime +30  -exec ls -l {} \;

cronjob and crontab (min,hr,day,day of month,month,day of week ,year command) 
cat /etc/crontab
crontab -e

cat file | grep -v ^#

find /bin  -perm 755 -ls 


=====================

.bash_profile is read and executed when Bash is invoked as an interactive login shell, while .bashrc is executed for an interactive non-login shell.

Use .bash_profile to run commands that should run only once, such as customizing the $PATH environment variable .

cut -d: -f1 /etc/passwd
-d is delimiter what comes after remove everthing
-f1 is field limiter

file redirections 

shutdown -r 23

find / -perm 7555

https://linuxize.com/post/how-to-add-swap-space-on-centos-7/

find /path -size +10M

cat -n 1 (list the line with number

find the files that has been accessed over 30days

find /etc -atime +30


# HEADER: This file was autogenerated at 2021-09-03 14:10:42 -0700 by puppet.
# HEADER: While it can still be managed manually, it is definitely not recommended.
# HEADER: Note particularly that the comments starting with 'Puppet Name' should
# HEADER: not be deleted, as doing so could cause duplicate cron jobs.
# Puppet Name: console_logrotate
0 1 * * * find /server/turn/home/*/logs/archive_perf* -name "*.log" -mtime +2 -exec rm {} \;&>/dev/null
# Puppet Name: purge_builds
0 3 * * * cd /server/turn/deploy/ && find . -maxdepth 1 -type d -name 'build-*' -mtime +15 |cut -d- -f2- |sort|while read build ;do echo "clean $build" |/usr/bin/ol-client; sleep 60 ; done >/dev/null 2>&1
# Puppet Name: tomcat_hourly_logrotate
10 * * * * find /server/turn/home/*/logs -wholename "*/tomcat*/localhost*_access_log.*" -mmin +180 -exec /usr/sbin/truncate_slow.pl {} \;
# Puppet Name: purge_tarballs
0 3 * * * cd /server/turn/deploy/tarballs && find . -maxdepth 1 -type f -name 'turn-*' -mtime +30 |cut -d- -f2- |cut -d'.' -f1|sort|while read build ;do echo "clean $build" |/usr/bin/ol-client; sleep 60 ; done >/dev/null 2>&1
# Puppet Name: oracle_purge_logs
0,15,30,45 * * * * find /tmp/sqlldr/Oracle/ -name "*.*" -type f -cmin +60 -exec rm {} \; &>/dev/null
# Puppet Name: container_logs
0 12 * * * cd /var/log/hadoop-yarn/container; find . -name 'application_*' -type d -mtime +4 -exec rm -rf {} \;


cut, sort, grep, awk, uniq, wc





    
   


    
    
    

